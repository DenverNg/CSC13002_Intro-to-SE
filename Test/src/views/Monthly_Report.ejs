<!DOCTYPE html>
<html lang="en">

<head>
	<title>SEBANK</title>
	<meta charset="utf-8">
	<link rel="stylesheet" href="/css/main.css">
	<script src="/js/func.js"></script>
	<link rel="stylesheet" href="/css/table.css">
	<!--JSPDF-->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.13/jspdf.plugin.autotable.min.js"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
	<script src="/js/table.js"></script>
	<link rel="stylesheet" href="/css/dropdown.css">
	<script src="/js/dropdown.js"></script>
	<link rel="stylesheet" href="/css/tab.css">
	<script src="/js/tab.js"></script>

	<link rel="stylesheet" href="/css/input.css">
	<link rel="stylesheet" href="/css/form_button.css">
	<link rel="stylesheet" href="/css/function_buttons.css">
	<link rel="stylesheet" href="/css/report_setup.css">
	<link rel="stylesheet" href="/css/dropdown_createbook.css">
	<link rel="stylesheet" href="/css/monthly_report.css">
	
	
	<!-- Linking Google Font Link for Icon -->
	<link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
	<link rel="stylesheet"
		href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
	<link rel="stylesheet" href="https://unicons.iconscout.com/release/v4.0.0/css/line.css">
</head>

<body>
	<div class="container">
		<aside class="sidebar" style="z-index: 99">
			<!-- Sidebar content -->
			<img src="/images/SEBank.png" alt="logo-hover" class="sidebar-img-default" />
			<img src="/images/Logo.png" alt="logo-hover" class="sidebar-img-hover" />
			<ul class="sidebar-links">
				<li data-content="Dashboard">
					<a href="/#">
						<span class="material-icons" style="font-size: 35px">
							home
						</span> Trang chủ
					</a>
				</li>
				<li data-content="Manage">
					<a href="/quan_ly_so#">
						<span class="material-icons" style="font-size: 35px">
							manage_search
						</span>Quản lý sổ
					</a>
				</li>
				<li class="active">
					<a href="/bao_cao_ngay#">
						<span class="material-icons" style="font-size: 35px">
							description
						</span> Báo cáo
					</a>
				</li>
				<li>
					<a href="/mat_khau#">
						<span class="material-icons" style="font-size: 35px">
							settings
						</span> Cài đặt
					</a>
				</li>
			</ul>
		</aside>

		<div class="main">
			<div class="content">
				<!-- Tabs -->
				<div class="tabs">
					<a id="daily-report-link" href="/bao_cao_ngay#" class="tab-item" style="display: inline-block; text-decoration: none;">
						<i class="tab-icon fas fa-code"></i>
						<label for="daily-report-link" class="report-tab">Báo cáo doanh số</label>
					</a>
					<div class="line"></div>
					
					<a id="month-report-link" href="/bao_cao_thang#" class="tab-item active" style="display: inline-block; text-decoration: none;">
						<i class="tab-icon fas fa-code"></i>
						<label for="month-report-link" class="report-tab">Báo cáo đóng/mở sổ</label>
					</a>
					<div class="line"></div>
				</div>

				<!-- Monthly Report Content -->
				<div class="tab-content">
					<div class="tab-pane active">
						<div class="topbar-report">
							Báo Cáo Đóng/Mở Hàng Tháng
						</div>
						<div class="subheader">
							<form action="/bao_cao_thang#" method="POST" class="EnterValue">
								<div id="input-date" class="form-group">
									<input id="date" name="date" class="form-group__input report-input__inp" type="month" placeholder=" " value="<%= currentMonth %>">
									<label for="date" class="form-group__title form-group__input__title">Tháng báo cáo</label>
									<span id="selected-month" class="form-group__message"></span>
								</div>
								
								<!--Dropdown Select-->
								<div class="wrapper">
									<div class="select-btn">
										<span id="selected-type">Chọn loại kỳ hạn</span>
										<p class="select-createbook-btn__title">Loại kỳ hạn</p>
										<i class="uil uil-angle-down"></i>
									</div>
									<div class="select-content">
										<div class="select-search">
											<i class="uil uil-search"></i>
											<input spellcheck="false" type="text" placeholder="Tìm kiếm loại kỳ hạn">
										</div>
										<ul class="options"></ul>
									</div>
								</div>
								<div id="types">
									<input type="hidden" name="types" value="<%= types %>">
								</div>
								
								<input type="hidden" id="hidden-type" name="selectedType" value="<%= selectedType %>">

								<button type="submit" class="form-group__button submit-button report-submit-button" name="action" value="confirm">Xem báo cáo</button>
							</form>

							<div class="Function">
								<button id="download-monthly" class="function-btn ">
									<%- include('../public/images/download.svg') %>
									<label for="new-book" class="function-label export-btn__label">Tải báo cáo</label>
								</button>

								<button id="print-monthly" class="function-btn ">
									<%- include('../public/images/print.svg') %>
									<label for="new-book" class="function-label export-btn__label">In báo cáo</label>
								</button>
		
							</div>
						</div>
					
					<section class="table__body report-table">
						<table id="Monthly-Report">
							<thead>
								<tr>
									<th style="width: 15%;"> STT </th>
									<th> Ngày </th>
									<th> Sổ mở </th>
									<th> Sổ đóng </th>
									<th> Chênh lệch </th>
								</tr>
							</thead>
							<tbody>
								<% for (let i=0; i < listMonthlyRP.length; i++) { %>
									<tr>
										<td>
											<%=i+1%>
										</td>
										<td>
											<%=listMonthlyRP[i].NGAY%>
										</td>
										<td>
											<%= listMonthlyRP[i].SOMO %>
										</td>
										<td>
											<%= listMonthlyRP[i].SODONG %>
										</td>
										<% if (listMonthlyRP[i].CHENHLECH> 0) { %>
											<td>
												<p style="color: rgb(73, 155, 73);">
													<%=listMonthlyRP[i].CHENHLECH%>
												</p>
											</td>
											<% } else if (listMonthlyRP[i].CHENHLECH==0) { %>
												<td>
													<p style="color: black;">
														<%=listMonthlyRP[i].CHENHLECH%>
													</p>
												</td>
												<% } else { %>
													<td>
														<p style="color: red;">
															<%=listMonthlyRP[i].CHENHLECH%>
														</p>
													</td>
													<% } %>
									</tr>
									<% } %>
							</tbody>
						</table>
					</section>

					</div>
				</div>
			</div>
		</div>
	</div>
	<!-- JavaScript to initialize the date input with the current month -->
	<script>
		document.addEventListener('DOMContentLoaded', function () {
			const dateInput = document.getElementById('date');
			const selectedMonthSpan = document.getElementById('selected-month');
			const currentMonth = "<%= currentMonth %>" // Set the input value to the current month
			if (currentMonth) {
				dateInput.value = currentMonth; // Đặt giá trị input là currentMonth
			} else {
				const now = new Date();
				const year = now.getFullYear();
				const month = ('0' + (now.getMonth() + 1)).slice(-2); // Tháng hiện tại với leading zero nếu cần
				dateInput.value = `${year}-${month}`; // Đặt giá trị input là tháng hiện tại
			}
			// Function to handle dropdown population
			const wrapper = document.querySelector(".wrapper"),
				selectBtn = wrapper.querySelector(".select-btn"),
				searchInp = wrapper.querySelector("input"),
				options = wrapper.querySelector(".options"),
				hiddenTypeInput = document.getElementById("hidden-type");

			//let types = ["Không kỳ hạn", "Kỳ hạn 3 tháng", "Kỳ hạn 6 tháng", "Kỳ hạn 8 tháng", "Kỳ hạn 10 tháng", "Kỳ hạn 12 tháng", "Kỳ hạn 16 tháng", "Kỳ hạn 20 tháng"]; // replace with actual types fetched from the server
			const types = "<%= types %>".split(","); // Get the types from the server-side variable	
			const selectedType = "<%= selectedType %>";
			
			function addType() {
				options.innerHTML = ""; // Clear the current options
				if (selectedType) {
					let li = `<li onclick="updateName(this)" class="selected">${selectedType}</li>`;
					options.insertAdjacentHTML("beforeend", li);
				}
				types.forEach(type => {
					if (type !== selectedType) {
						let li = `<li onclick="updateName(this)">${type}</li>`;
						options.insertAdjacentHTML("beforeend", li);
					}
				});
			}

			addType(); // Populate dropdown on page load
			const firstOption = options.querySelector('li');
			updateName(firstOption);

			function updateName(selectedLi) {
				searchInp.value = ""; // Clear search input
				addType(); // Refresh list with the selected type
				selectBtn.firstElementChild.innerText = selectedLi.innerText; // Update button text with selected type
				wrapper.classList.remove("active"); // Hide dropdown options after selection
				hiddenTypeInput.value = selectedLi.innerText; // Update hidden input value
			}

			searchInp.addEventListener("keyup", () => {
				let arr = [];
				let searchedVal = searchInp.value.toLowerCase();
				arr = types.filter(data => {
					return data.toLowerCase().includes(searchedVal); // Filter types based on search input
				}).map(data => {
					let isSelected = data == selectBtn.firstElementChild.innerText ? "selected" : "";
					return `<li onclick="updateName(this)" class="${isSelected}">${data}</li>`;
				}).join("");
				options.innerHTML = arr ? arr : `<p style="margin-top: 10px;">Không tìm thấy loại kỳ hạn nào</p>`; // Update dropdown with filtered list or message if no match
			});

			selectBtn.addEventListener("click", () => wrapper.classList.toggle("active")); // Toggle dropdown visibility
			
			options.addEventListener('click', (event) => {
				if (event.target.tagName === 'LI') {
					updateName(event.target);
				}
			})
		});
	</script>
	<script>
		// Convert binary string to ArrayBuffer
			function s2ab(s) {
				const buf = new ArrayBuffer(s.length);
				const view = new Uint8Array(buf);
				for (let i = 0; i < s.length; i++) {
					view[i] = s.charCodeAt(i) & 0xFF;
				}
				return buf;
			}
			
		function exportToExcel() {
				const table = document.getElementById('Monthly-Report');
				const title = "BÁO CÁO DOANH SỐ HOẠT ĐỘNG THÁNG";
				const selectedType = document.getElementById('hidden-type').value; // Get the selected type value
				const workbook = XLSX.utils.book_new();
				const ws_data = [];

				// Title row
				ws_data.push([title]);

				// Date row
				ws_data.push([`THÁNG: ${document.getElementById('date').value}`]);

				// Add selected type
				ws_data.push([`LOẠI KỲ HẠN: ${selectedType}`]); // Add selected type here

				// Empty row
				ws_data.push([]);

				// Extract headers
				const headers = [...table.querySelectorAll('thead th')].map(th => th.textContent.trim());
				ws_data.push(headers);

				// Extract rows
				const rows = table.querySelectorAll('tbody tr');
				rows.forEach(row => {
					const rowData = [...row.querySelectorAll('td')].map(td => td.textContent.trim());
					ws_data.push(rowData);
				});

				const ws = XLSX.utils.aoa_to_sheet(ws_data);

				// Merge cells for title, date, and selected type
				ws['!merges'] = [
					{ s: { r: 0, c: 0 }, e: { r: 0, c: headers.length - 1 } }, // Merge title row
					{ s: { r: 1, c: 0 }, e: { r: 1, c: headers.length - 1 } }, // Merge date row
					{ s: { r: 2, c: 0 }, e: { r: 2, c: headers.length - 1 } }, // Merge selected type row
				];

				// Apply styles with checks
				function applyStyle(cellRef, style) {
					if (!ws[cellRef]) ws[cellRef] = {};
					ws[cellRef].s = ws[cellRef].s || {};
					Object.assign(ws[cellRef].s, style);
				}

				// Style the title
				applyStyle('A1', {
					font: { sz: 18, bold: true, color: { rgb: "FF0000" } },
					alignment: { horizontal: 'center', vertical: 'center' },
				});

				// Style the date row
				applyStyle('A2', {
					font: { sz: 12 },
					alignment: { horizontal: 'center', vertical: 'center' },
				});

				// Style the selected type row
				applyStyle('A3', {
					font: { sz: 12 },
					alignment: { horizontal: 'center', vertical: 'center' },
				});

				// Style the headers
				const headerStyle = {
					font: { sz: 12, bold: true },
					fill: { fgColor: { rgb: "FFFF00" } }, // Yellow background
					alignment: { horizontal: 'center', vertical: 'center' },
					border: {
						top: { style: 'thin' },
						bottom: { style: 'thin' },
						left: { style: 'thin' },
						right: { style: 'thin' },
					},
				};

				headers.forEach((_, i) => {
					const cellRef = XLSX.utils.encode_cell({ c: i, r: 3 }); // Adjust row number based on header row
					applyStyle(cellRef, headerStyle);
				});

				// Apply border to all cells
				const range = XLSX.utils.decode_range(ws['!ref']);
				for (let R = range.s.r; R <= range.e.r; ++R) {
					for (let C = range.s.c; C <= range.e.c; ++C) {
						const cell_ref = XLSX.utils.encode_cell({ r: R, c: C });
						applyStyle(cell_ref, {
							border: {
								top: { style: 'thin' },
								bottom: { style: 'thin' },
								left: { style: 'thin' },
								right: { style: 'thin' },
							},
						});
					}
				}

				// Automatically adjust column widths
				const colWidths = [];
				ws_data.forEach(row => {
					row.forEach((cell, colIndex) => {
						const length = cell ? cell.toString().length : 10;
						if (!colWidths[colIndex] || colWidths[colIndex] < length) {
							colWidths[colIndex] = length;
						}
					});
				});

				colWidths.forEach((width, i) => {
					ws['!cols'] = ws['!cols'] || [];
					ws['!cols'][i] = { wpx: width * 10 };
				});

				ws['!cols'][0] = { wpx: Math.max(200, (colWidths[0] || 10) * 10) };

				XLSX.utils.book_append_sheet(workbook, ws, "Sheet1");

				return XLSX.write(workbook, { bookType: 'xlsx', type: 'binary' });
			}

		document.getElementById('download-monthly').addEventListener('click', () => {
				const excel_data = exportToExcel();
				const fileName = `Monthly_Report_${document.getElementById('date').value}.xlsx`;
				const blob = new Blob([s2ab(excel_data)], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
				const link = document.createElement('a');
				link.href = URL.createObjectURL(blob);
				link.download = fileName;
				document.body.appendChild(link);
				link.click();
				document.body.removeChild(link);
			});

	</script>
	<script>
			const selectedType = "<%= selectedType %>";
			const pdf_btn = document.querySelector('#print-monthly');
			const monthly_table = document.querySelector('#Monthly-Report');
			const currentMonth = "<%= currentMonth %>";

			const toPDF = function (customers_table) {
					const new_table = document.createElement("table");

					// Loop through rows and cells
					for (const row of customers_table.rows) {
						const new_row = new_table.insertRow();
						for (const cell of row.cells) {
							const new_cell = new_row.insertCell();

							// Check if cell contains text (no icons)
							if (cell.textContent.trim() !== "") {
								new_cell.textContent = cell.textContent;
							}
						}
					}

					const html_code = `
        <!DOCTYPE html>
        <html>
        <head>
            <link rel="stylesheet" href="/css/table_report.css"> <!-- Use the same CSS file for consistent styling -->
        </head>
        <body>
            <center>
                <img src="/images/Report-Header.png" alt="Report Header">
                <div class="header">Báo cáo doanh số hoạt động tháng</div>
                Tháng: ${currentMonth}  <br>
				Loại kỳ hạn: ${selectedType} <br>
                <main class="table">${new_table.outerHTML}</main>
                <img src="/images/Report-Footer.png" alt="Report Footer">
            </center>
        </body>
        </html>
    `;


				const new_window = window.open();
				new_window.document.write(html_code);
				new_window.document.close();

				setTimeout(() => {
					new_window.print();
					new_window.close();
				}, 400);
			};

			if (pdf_btn) {
				pdf_btn.addEventListener('click', () => {
					console.log('Icon clicked');
					toPDF(monthly_table);
				});
			} else {
				console.error('Print button not found');
			}
	</script>
</body>

</html>
